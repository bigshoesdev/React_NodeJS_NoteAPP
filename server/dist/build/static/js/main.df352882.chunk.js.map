{"version":3,"sources":["components/EditNote.tsx","API.ts","components/NoteItemList.tsx","App.tsx","index.tsx"],"names":["TextArea","Input","AddNote","saveNote","note","useState","formData","setFormData","useEffect","handleFormChange","e","target","currentTarget","name","value","className","placeholder","onChange","allowClear","style","marginBottom","maxLength","text","rows","type","disabled","onClick","Modal","error","title","content","getNotes","a","axios","get","notes","Error","addNote","post","addNoteResp","updateNote","noteUpdate","put","_id","updateNoteResp","NoteItemList","setNote","mode","theme","find","key","selectedKeys","map","Item","App","setNotes","fetchNotes","then","data","catch","err","console","log","handleSaveNote","resp","status","xs","sm","md","size","icon","PlusOutlined","lg","EditNote","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df352882.chunk.js","sourcesContent":["import { Button, Input, Modal } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { TextArea } = Input;\n\ntype Props = {\n  saveNote: (formData: INote) => void;\n  note: INote;\n};\n\nconst AddNote: React.FC<Props> = ({ saveNote, note }) => {\n  const [formData, setFormData] = useState<INote>({});\n\n  useEffect(() => {\n    setFormData(note);\n  }, [note]);\n\n  const handleFormChange = (\n    e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const target = e.currentTarget;\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n\n  const submitForm = () => {\n    if (!formData?.text || !formData?.name) {\n      Modal.error({\n        title: \"Error!\",\n        content: \"Please fill up the inputs.\",\n      });\n    }\n\n    saveNote({ ...formData });\n  };\n\n  return (\n    <form className=\"Form\">\n      <Input\n        name=\"name\"\n        placeholder=\"Name\"\n        onChange={handleFormChange}\n        allowClear\n        value={formData?.name}\n        style={{ marginBottom: \"1rem\" }}\n      ></Input>\n      <TextArea\n        name=\"text\"\n        placeholder=\"Text\"\n        onChange={handleFormChange}\n        allowClear\n        maxLength={250}\n        value={formData?.text}\n        style={{ marginBottom: \"1rem\" }}\n        rows={5}\n      ></TextArea>\n      <Button\n        type=\"primary\"\n        disabled={!formData?.name || !formData?.text}\n        onClick={submitForm}\n      >\n        Save Note\n      </Button>\n    </form>\n  );\n};\n\nexport default AddNote;\n","import axios, { AxiosResponse } from \"axios\";\n\nconst baseUrl: string = \"\";\n\nexport const getNotes = async (): Promise<AxiosResponse<ApiDataType>> => {\n  try {\n    const notes: AxiosResponse<ApiDataType> = await axios.get(\n      baseUrl + \"/notes\"\n    );\n    return notes;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n\nexport const addNote = async (\n  formData: INote\n): Promise<AxiosResponse<ApiDataType>> => {\n  try {\n    const note: Omit<INote, \"_id\"> = {\n      name: formData.name,\n      text: formData.text,\n    };\n    const addNoteResp: AxiosResponse<ApiDataType> = await axios.post(\n      baseUrl + \"/notes\",\n      note\n    );\n    return addNoteResp;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n\nexport const updateNote = async (\n  note: INote\n): Promise<AxiosResponse<ApiDataType>> => {\n  try {\n    const noteUpdate: Pick<INote, \"text\" | \"name\"> = {\n      text: note.text,\n      name: note.name,\n    };\n\n    const updateNoteResp: AxiosResponse<ApiDataType> = await axios.put(\n      `${baseUrl}/notes/${note._id}`,\n      noteUpdate\n    );\n\n    return updateNoteResp;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n","import React from \"react\";\nimport { Menu } from \"antd\";\n\ntype Props = {\n  note: INote;\n  notes: INote[];\n  setNote: (note: INote) => void;\n};\n\nconst NoteItemList: React.FC<Props> = ({ note, notes, setNote }) => {\n  const handleNoteItemClick = (e: any) => {\n    const note = notes.find((note) => note._id == e.key) as INote;\n    setNote(note);\n  };\n\n  return (\n    <Menu\n      mode=\"inline\"\n      theme=\"dark\"\n      onClick={handleNoteItemClick}\n      selectedKeys={[note?._id as string]}\n    >\n      {notes?.map((note: INote) => (\n        <Menu.Item key={note._id}>{note.name}</Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n\nexport default NoteItemList;\n","import React, { useEffect, useState } from \"react\";\nimport EditNote from \"./components/EditNote\";\nimport \"./App.scss\";\nimport { getNotes, addNote, updateNote } from \"./API\";\nimport { Button, Col, Modal, Row } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport NoteItemList from \"./components/NoteItemList\";\n\nconst App: React.FC = () => {\n  const [notes, setNotes] = useState<INote[]>([]);\n  const [note, setNote] = useState<any>({});\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = (): void => {\n    getNotes()\n      .then(({ data: { notes } }: INote[] | any) => setNotes(notes))\n      .catch((err: Error) => console.log(err));\n  };\n\n  const addNewNote = (): void => {\n    setNote({});\n  };\n\n  const handleSaveNote = async (formData: INote) => {\n    let resp: any;\n    if (!formData._id) {\n      resp = await addNote(formData);\n    } else {\n      resp = await updateNote(formData);\n    }\n\n    let { status, data } = resp;\n\n    console.log(status, data);\n    if (status != 201 && status != 200) {\n      Modal.error({\n        title: \"Error!\",\n        content: \"Note is not saved.\",\n      });\n    }\n\n    setNotes(data.notes);\n  };\n\n  return (\n    <main className=\"App\">\n      <Row>\n        <Col xs={24} sm={24} md={24} className=\"Header\">\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            icon={<PlusOutlined />}\n            onClick={addNewNote}\n          ></Button>\n          <h1>My Awesome Notepad</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={24} sm={24} lg={10}>\n          <NoteItemList\n            notes={notes}\n            note={note}\n            setNote={setNote}\n          ></NoteItemList>\n        </Col>\n        <Col xs={24} sm={24} lg={14}>\n          <EditNote note={note} saveNote={handleSaveNote} />\n        </Col>\n      </Row>\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport 'antd/dist/antd.css';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}